-- this code was found somewhere...

function init(self)
	-- correction vector
	self.correction = vmath.vector3()
end

function update(self, dt)
	-- reset correction
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") and message.other_group ~= hash("triggerZ") then
		-- correction vector for this frame:
		if  message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
		self.otherIdCollisionActive = true
	end
end