local AdditionalTable_M = require "LuaModules.AdditionalTable"
local SaveLoad = require "LuaModules.SaveLoad"
local MoveComponent = require "LuaModules.MoveComponent"

local KanjiRecognizer = require "LuaModules.KanjiRecognizer"

-- player game mode
go.property("Mode", hash(""))
local PLAYER_MODE = {NORMAL = hash("Normal"), FLY = hash("Fly")}
local currentMode

-- movement speed
local speed = 100
-- modifier for speed in sprint mode
local SPRINT_MOD = 1.5

local MOVEMENT_FORCE_THRESHOLD = 1.1

TILE_SIZE = 32
MAX_INK = 200 -- max ink level at the moment

-- all possible direactions of the animations
local DIRECTIONS = {UP = "Up", RIGHT = "Right", DOWN = "Down", LEFT = "Left"}
-- current direction of the animation
local direction = DIRECTIONS.DOWN

local currentMaxCells = 4
local inventory = {}

-- position of the player in last save file
local playerSavePosition = nil

-- when sound was started this var = true and it doesn't allow other sounds to be played
local isSoundPlaying = false

local isAlive = true

-- dev mode, when not active debug keys dont work
local devMode = false

-- add delta to kanji point 
local function addKanjiPoints(self, delta)
    self.kanjiPoints = self.kanjiPoints + delta
    self.kanjiPoints = (self.kanjiPoints >= 0 and self.kanjiPoints or 0)
    msg.post(INVENTORY, "SetKanjiPoints", {kanjiPoints = self.kanjiPoints})
    msg.post(HUD, "SetKanjiPoints", {kanjiPoints = self.kanjiPoints})
    
end

-- add delta to ink 
local function addInk(self, delta)
    self.ink = (self.ink + delta <= MAX_INK and self.ink + delta or MAX_INK)
    self.ink = (self.ink >= 0 and self.ink or 0)
    msg.post(HUD, "SetInk", {ink = self.ink})
    msg.post(HANDWRITING_SCREEN, "SetInk", {ink = self.ink})
end

function init(self)
    KanjiRecognizer.test()
    PLAYER_URL = msg.url()
	msg.post(".", "acquire_input_focus")
    
    if self.Mode == hash("Normal") or self.Mode == hash("")  then
        currentMode = PLAYER_MODE.NORMAL
        -- start input
        self.input = vmath.vector3(0, 0, 0)
    elseif self.Mode == hash("Fly") then
        currentMode = PLAYER_MODE.FLY
        -- start input
        self.input = vmath.vector3(1, 0, 0)
        -- new speed
        speed = speed * 2
    end 

	self.animPlaybackRate = 1

	self.interactables = {}-- data to save

	self.movementForce = 0
    
	-- start resources
	self.kanjiPoints = 0
	addKanjiPoints(self, 24)
	self.ink = 0
	addInk(self, 0) 
	-- TODO: set ink in HUD
    self.noteNumber = 1
    
    msg.post(INVENTORY, "SetMaxInventoryCells", {cellsMax = currentMaxCells})
    
	msg.post(".", "LoadData")
    
    -- player init position
    self.initPos = go.get_position()
    
    -- sprint ink-spending timer handle
    self.sprintTimerH = nil
end

-- defines direction of the walk animation
local function defineWalkDirection(self)
	if self.input.x > 0 then
		if go.get("#sprite", "animation") ~= hash("WalkRight") then
		    direction = DIRECTIONS.RIGHT
		end
	elseif self.input.x < 0 then
		if go.get("#sprite", "animation") ~= hash("WalkLeft") then
			direction = DIRECTIONS.LEFT
		end
	elseif self.input.y > 0 then
		if go.get("#sprite", "animation") ~= hash("WalkUp") then
			direction = DIRECTIONS.UP
		end
	elseif self.input.y < 0 then
		if go.get("#sprite", "animation") ~= hash("WalkDown") then
			direction = DIRECTIONS.DOWN
		end
	end
end

-- updates position and resets input
local function move(self, dt)	
	local direction = vmath.normalize(self.input)
	local position = go.get_position()
	
	position = position + direction * speed * dt
	go.set_position(position)
	
end

function update(self, dt)
	-- how fast our movement force is grow
	-- need to synchronize start of the animation and movement
	local forceDelta = dt * 150 * self.animPlaybackRate/13
	-- to have an input vector with both axes we must check it outside input method
	if vmath.length(self.input) > 0  and isAlive then
	   go.set("#sprite", "playback_rate", self.animPlaybackRate)
	   go.set("#backpack", "playback_rate", self.animPlaybackRate) 	
	   
	   -- play walk animation
	   defineWalkDirection(self)
	   if go.get("#sprite", "animation") ~= hash("Walk"..direction)  then
	       msg.post("#sprite", "play_animation", {id = hash("Walk"..direction)})
	       msg.post("#backpack", "play_animation", {id = hash("Walk"..direction)})
	   end
	   
	   if currentMode == PLAYER_MODE.NORMAL then
	       -- "+ forceDelta*3" â€” we need to give some time for movement to stop
	       if self.movementForce <= MOVEMENT_FORCE_THRESHOLD + forceDelta*3 then
	           self.movementForce = self.movementForce + forceDelta
	       end
	       if self.movementForce > MOVEMENT_FORCE_THRESHOLD then
	           move(self, dt)
	           self.input.x = 0
	           self.input.y = 0
	       end
	    elseif currentMode == PLAYER_MODE.FLY then
	       move(self, dt)
	    end
		
	elseif currentMode == PLAYER_MODE.NORMAL then
		if self.movementForce > 0 then
			-- decrementation must be faster than incrementation 
			self.movementForce = self.movementForce - forceDelta*2
		end
		
		-- play stand animation
		if go.get("#sprite", "animation") ~= hash("Stand"..direction)  then
            sprite.play_flipbook("#sprite", "Stand"..direction)
            go.set("#backpack", "playback_rate", 0)
            go.set("#backpack", "cursor", 0)
        end
	end
end

local function interaction(self)
	if self.interactables[1] ~= nil then
       -- msg.post(self.interactables[1], "Interaction")
        for key,value in pairs(self.interactables) do
        	print("Send interaction to " .. tostring(value))
        	msg.post(value, "Interaction")
        end
	else
		print("Nothing to interact to!")
	end
end

local backpackEnabled = true

function on_input(self, action_id, action)
	-- definine an input vector 
	if action_id == hash("WalkUp") then
		self.input.y = 1
		if currentMode == PLAYER_MODE.FLY then
		      self.input.x = 0
		end
		
	elseif action_id == hash("WalkDown") then
		self.input.y = -1
		if currentMode == PLAYER_MODE.FLY then
		      self.input.x = 0
		end
		
	elseif action_id == hash("WalkLeft") then
		self.input.x = -1
		if currentMode == PLAYER_MODE.FLY then
		      self.input.y = 0
		end
		
	elseif action_id == hash("WalkRight") then
		self.input.x = 1
		if currentMode == PLAYER_MODE.FLY then
		      self.input.y = 0
        end

	-- in case of touch
	elseif (action_id == hash("Interaction") or action_id == hash("Touch")) 
	   and action.pressed and currentMode == PLAYER_MODE.NORMAL then
		interaction(self)

	elseif backpackEnabled and action.pressed 
	   and action_id == hash("Inventory")  and currentMode == PLAYER_MODE.NORMAL then
	   msg.post(INVENTORY, "ToggleAlpha")
	   
	
	elseif action.pressed and action_id == hash("Menu") then
	   msg.post(MENU, "ToggleAlpha")
	   if backpackEnabled then
	       msg.post(HUD, "ToggleAlpha", {nodeName = "InkBar"})
	   end
	
	elseif action_id == hash("Sprint") then
	   if action.pressed and self.ink > 0 then
	       speed = speed * SPRINT_MOD
	       self.animPlaybackRate = SPRINT_MOD
	       -- start spending ink
	       self.sprintTimerH = timer.delay(1, true, function() addInk(self, -1) end)
	       particlefx.play("#inkDrops")
	   elseif action.released and self.animPlaybackRate == SPRINT_MOD then
	       speed = speed / SPRINT_MOD
	       self.animPlaybackRate = 1
	       -- stop spending ink
	       if self.sprintTimerH ~= nil then 
	           timer.cancel(self.sprintTimerH)
	           particlefx.stop("#inkDrops")
	       end
        end
    -- devMode
    elseif devMode then
        if action.pressed and action_id == hash("CollisionON") then
            msg.post("#collision", "enable")

        elseif action.pressed and action_id == hash("CollisionOFF") then
            msg.post("#collision", "disable")

        elseif action_id == hash("RestoreInk") then
            addInk(self, MAX_INK)
        end
	end
    
end

local function saveData(self)
    -- save data
    SaveLoad.saveData(PLAYER_SAVE_NAME, 
		{ 
		position = playerSavePosition,
		kanjiPoints = self.kanjiPoints, 
		ink = self.ink,
		currentMaxCells = currentMaxCells,
		inventory = inventory,
		noteNumber = self.noteNumber 		
		})
end

-- change of z coordinate for other objects on trigger_response
local zShift = 0.2
-- objects that were change by this script in z axis
local changedObjects = {}

function on_message(self, message_id, message, sender)
	if message_id == hash("registerInteractable") then
		table.insert(self.interactables, message.interactable)
		print("Register interactable: " .. message.interactable)
		
	elseif message_id == hash("removeInteractable") then
		local removeResult = table.remove(self.interactables, AdditionalTable_M.findElement(self.interactables, message.interactable))
		if removeResult then
			print("Remove interactable: " .. message.interactable)
		end
		
	elseif message_id == hash("Interaction") then
		interaction(self)
		
	elseif message_id == hash("acquire_input_focus") then
		msg.post("#camera", "acquire_camera_focus")
		
	elseif message_id == hash("release_input_focus") then
		msg.post(".", "release_input_focus")
	
	elseif message_id == hash("AddKanjiPoints") then
	   addKanjiPoints(self, message.kanjiPoints)
	
	elseif message_id == hash("SaveData") then
	   if message.playerSavePosition == nil then
	       playerSavePosition = go.get_position()
	   else
	       playerSavePosition = message.playerSavePosition
	   end
	   -- actualize inventory items and then save it
	   msg.post(INVENTORY, "GetInventoryItems")
	   timer.delay(0.1, false, saveData)
	
	elseif message_id == hash("LoadData") then
	   local data = SaveLoad.loadData(PLAYER_SAVE_NAME)
	   
	   -- set default ink
	   self.ink = 0
	   if data ~= 0 then
    	   if data.position ~= nil then
    	       msg.post(HUD, "HideVisuals")
    	       
    	       if not devMode then go.set_position(data.position) end
    	   end
	   
	       -- set KP
    	   self.kanjiPoints = 0
    	   addKanjiPoints(self, data.kanjiPoints)
	       
	       -- set ink
	       self.ink = 0
	       addInk(self, data.ink)
	       
	       -- inventory cells
	       currentMaxCells = data.currentMaxCells
	       msg.post(INVENTORY, "SetMaxInventoryCells", {cellsMax = currentMaxCells})
	       -- inventory items
	       inventory = data.inventory
	       
	       self.noteNumber = data.noteNumber
	       msg.post(INVENTORY, "SetDiaryNote", {noteNumber = self.noteNumber})
	   else
	       -- default data
	       -- inventory items
	       inventory = {}
	   end
	   msg.post(INVENTORY, "SetInventoryItems", {inventoryItems = inventory})
	
	elseif message_id == hash("UseItem") then
	   if message.item.categorie == ITEM_CATEGORIE.RESOURCE then
	       if message.item.resource == PLAYER_RESOURCE.INK then
	           addInk(self, message.item.delta)
	           
	       elseif message.item.resource == PLAYER_RESOURCE.KANJI_POINTS then
	            addKanjiPoints(self, message.item.delta)
	       end
	   elseif message.item.categorie == ITEM_CATEGORIE.POWER_UP then
	       if message.item.resource == PLAYER_RESOURCE.BACKPACK then
	           currentMaxCells = currentMaxCells + message.item.delta
	           msg.post(INVENTORY, "SetMaxInventoryCells", {cellsMax = currentMaxCells})
	       end
	   end
	
	elseif message_id == hash("GetInventoryItems") then
	   inventory = message.inventoryItems
	
	elseif message_id == hash("GetInk") then
	   msg.post(sender, "GetInkResponse", {ink = self.ink})
	
	elseif message_id == hash("ChangeInk") then
	   addInk(self, message.delta)
	   
	elseif message_id == hash("GetKanjiPoints") then
	   msg.post(sender, message_id, {kanjiPoints = self.kanjiPoints})
	
	elseif message_id == hash("PlaySound") and not isSoundPlaying then
	   isSoundPlaying = true
	   -- get path of the sound property in sound component
	   local snd = sys.load_resource(message.sound)
	   local path = go.get("#sound", "sound")
	   resource.set_sound(path, snd)
	   sound.play("#sound")
	   
	elseif message_id == hash("sound_done") then
	   isSoundPlaying = false
	  
	elseif message_id == hash("ComponentEnableChange") then
	   if message.component == hash("backpack") then
	       backpackEnabled = message.enable
	       print(backpackEnabled)
	   end
	
	elseif message_id == hash("ShowBackpack") then
	   if backpackEnabled then
	       msg.post(HUD, "ToggleAlpha", {nodeName = "InkBar"})
	   end
	
	elseif message_id == hash("trigger_response") and sender.fragment == hash("triggerUp") then
        local pos = go.get_position(message.other_id)
        local playerPos = go.get_position()
        
        -- we want to control depth interaction. So, we block any extra enter or othr exit attempts with potentialKey
        -- which stores info about exact depth interaction
        local potentialKey = message.other_id--..message.other_group
        if message.enter and changedObjects[potentialKey] == nil then
            -- print(message.other_group)
            print("ENTER "..message.other_id)
            
            changedObjects[potentialKey] = pos.z
            pos.z = pos.z + zShift
        elseif not message.enter and changedObjects[potentialKey] ~= nil then
            print("EXIT ".. message.other_id)
            
            pos.z = changedObjects[potentialKey]
            changedObjects[potentialKey] = nil
        end
        
        go.set_position(pos, message.other_id)
	
	elseif message_id == hash("collision_response") and currentMode == PLAYER_MODE.FLY and isAlive then
	   if message.other_group == hash("wall" )or message.other_group == hash("tilemapWall") 
            or message.other_group == hash("nonTriggerWall") then
            
            -- disable fly mode for a time
            isAlive = false
            
            msg.post("#backpack", "disable")
            sprite.play_flipbook("#sprite", "Dead", 
            function()
                -- reload player
                msg.post("#backpack", "enable")
                -- load saved data and set saved position
                local data = SaveLoad.loadData(PLAYER_SAVE_NAME)
                msg.post(HUD, "HideVisuals")
                if data ~= 0 and data.position ~= nil then
                    go.set_position(data.position)
                else
                    go.set_position(self.initPos)
                end
                
                isAlive = true
            end)

        else
            print(message.other_group)
        end 
    elseif message_id == hash("ReleaseInput") then
        -- reset sprint
        if self.animPlaybackRate == SPRINT_MOD then
            speed = speed / SPRINT_MOD
	        self.animPlaybackRate = 1
	    end
	    
	    -- release input focus
        msg.post(".", "release_input_focus")
	
	elseif message_id == hash("SetNoteNumber") then
		self.noteNumber = message.noteNumber
	end
end

function final(self) 
    msg.post(".", "release_input_focus") 
    -- msg.post("#camera", "release_camera_focus")
end



