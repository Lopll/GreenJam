local AdditionalTable_M = require "LuaModules.AdditionalTable"
local MoveComponent = require "LuaModules.MoveComponent"

-- movement speed
local speed = 100
local MOVEMENT_FORCE_THRESHOLD = 1.1

TILE_SIZE = 32
MAX_INK = 200 -- max ink level at the moment

-- all possible direactions of the animations
local DIRECTIONS = {UP = "Up", RIGHT = "Right", DOWN = "Down", LEFT = "Left"}
-- current direction of the animation
local direction = DIRECTIONS.DOWN

-- when sound was started this var = true and it doesn't allow other sounds to be played
local isSoundPlaying = false

-- dev mode, when not active debug keys dont work
local devMode = true

local currentWorldSpeed = 1

local checkPoint
local timeControlEnabled = devMode

function init(self)
    PLAYER_URL = msg.url()
	msg.post(".", "acquire_input_focus")
    
        -- start input
        self.input = vmath.vector3(0, 0, 0)

	self.animPlaybackRate = 1

	self.interactables = {}-- data to save

	self.movementForce = 0
    
    
    -- player init position
    self.initPos = go.get_position()
    
    -- sprint ink-spending timer handle
    self.sprintTimerH = nil
    
    msg.post(HUD, "SetSpeedVisible", {visible = timeControlEnabled})
end

-- defines direction of the walk animation
local function defineWalkDirection(self)
	if self.input.x > 0 then
		if go.get("#sprite", "animation") ~= hash("WalkRight") then
		    direction = DIRECTIONS.RIGHT
		end
	elseif self.input.x < 0 then
		if go.get("#sprite", "animation") ~= hash("WalkLeft") then
			direction = DIRECTIONS.LEFT
		end
	elseif self.input.y > 0 then
		if go.get("#sprite", "animation") ~= hash("WalkUp") then
			direction = DIRECTIONS.UP
		end
	elseif self.input.y < 0 then
		if go.get("#sprite", "animation") ~= hash("WalkDown") then
			direction = DIRECTIONS.DOWN
		end
	end
end

-- updates position and resets input
local function move(self, dt)	
	local direction = vmath.normalize(self.input)
	local position = go.get_position()
	
	position = position + direction * speed/currentWorldSpeed * dt
	go.set_position(position)
	
end

function update(self, dt)
	-- how fast our movement force is grow
	-- need to synchronize start of the animation and movement
	local forceDelta = dt * 150 * self.animPlaybackRate/(13*currentWorldSpeed)
	-- to have an input vector with both axes we must check it outside input method
	if vmath.length(self.input) > 0  then
	   go.set("#sprite", "playback_rate", self.animPlaybackRate/currentWorldSpeed)
	   
	   -- play walk animation
	   defineWalkDirection(self)
	   if go.get("#sprite", "animation") ~= hash("Walk"..direction)  then
	       msg.post("#sprite", "play_animation", {id = hash("Walk"..direction)})
	   end
	   
	       -- "+ forceDelta*3" â€” we need to give some time for movement to stop
	       if self.movementForce <= MOVEMENT_FORCE_THRESHOLD + forceDelta*3 then
	           self.movementForce = self.movementForce + forceDelta
	       end
	       if self.movementForce > MOVEMENT_FORCE_THRESHOLD then
	           move(self, dt)
	           self.input.x = 0
	           self.input.y = 0
	       end
		
	else
		if self.movementForce > 0 then
			-- decrementation must be faster than incrementation 
			self.movementForce = self.movementForce - forceDelta*2
		end
		
		-- play stand animation
		if go.get("#sprite", "playback_rate") ~= 0  then
            go.set("#sprite", "playback_rate", 0)
            go.set("#sprite", "cursor", 0)
        end
	end
end

local function interaction(self)
	if self.interactables[1] ~= nil then
       -- msg.post(self.interactables[1], "Interaction")
        for key,value in pairs(self.interactables) do
        	print("Send interaction to " .. tostring(value))
        	msg.post(value, "Interaction")
        end
	else
		print("Nothing to interact to!")
	end
end

local function setWorldSpeed(speed)
	currentWorldSpeed = speed
	msg.post(SCENE_MANAGER, "SetWorldSpeed", {worldSpeed = speed})
	msg.post(HUD, "SetWorldSpeed", {worldSpeed = speed})
end

local backpackEnabled = true

function on_input(self, action_id, action)
	-- definine an input vector 
	if action_id == hash("WalkUp") then
		self.input.y = 1
		
	elseif action_id == hash("WalkDown") then
		self.input.y = -1
		
	elseif action_id == hash("WalkLeft") then
		self.input.x = -1
		
	elseif action_id == hash("WalkRight") then
		self.input.x = 1

	-- in case of touch
	elseif (action_id == hash("Interaction") or action_id == hash("Touch")) 
	   and action.pressed then
		interaction(self)

	-- elseif action_id == hash("Sprint") then
	--    if action.pressed and self.ink > 0 then
	--        speed = speed * SPRINT_MOD
	--        self.animPlaybackRate = SPRINT_MOD
	--        -- start spending ink
	--        self.sprintTimerH = timer.delay(1, true, function() addInk(self, -1) end)
	--        particlefx.play("#inkDrops")
	--    elseif action.released and self.animPlaybackRate == SPRINT_MOD then
	--        speed = speed / SPRINT_MOD
	--        self.animPlaybackRate = 1
	--        -- stop spending ink
	--        if self.sprintTimerH ~= nil then 
	--            timer.cancel(self.sprintTimerH)
	--            particlefx.stop("#inkDrops")
	--        end
	--     end
    elseif action_id == hash("Speed1") and action.pressed and timeControlEnabled then
    	if currentWorldSpeed > 0.25 then
    		setWorldSpeed(currentWorldSpeed - 0.25)
    	end
    elseif action_id == hash("Speed2") and action.pressed and timeControlEnabled then
    	setWorldSpeed(1)
    elseif action_id == hash("Speed3")and action.pressed and timeControlEnabled  then
    	if currentWorldSpeed < 2.5 then
    		setWorldSpeed(currentWorldSpeed + 0.25)
    	end
    -- devMode
    elseif devMode then
        if action.pressed and action_id == hash("CollisionON") then

        elseif action.pressed and action_id == hash("CollisionOFF") then

        elseif action_id == hash("RestoreInk") then
        end
	end
    
end

-- change of z coordinate for other objects on trigger_response
local zShift = 0.2
-- objects that were change by this script in z axis
local changedObjects = {}

function on_message(self, message_id, message, sender)
	if message_id == hash("registerInteractable") then
		table.insert(self.interactables, message.interactable)
		print("Register interactable: " .. message.interactable)
		
	elseif message_id == hash("removeInteractable") then
		local removeResult = table.remove(self.interactables, AdditionalTable_M.findElement(self.interactables, message.interactable))
		if removeResult then
			print("Remove interactable: " .. message.interactable)
		end
		
	elseif message_id == hash("Interaction") then
		interaction(self)
		
	elseif message_id == hash("acquire_input_focus") then
		msg.post("#camera", "acquire_camera_focus")
		
	elseif message_id == hash("release_input_focus") then
		msg.post(".", "release_input_focus")
	
	elseif message_id == hash("PlaySound") and not isSoundPlaying then
	   isSoundPlaying = true
	   -- get path of the sound property in sound component
	   local snd = sys.load_resource(message.sound)
	   local path = go.get("#sound", "sound")
	   resource.set_sound(path, snd)
	   sound.play("#sound")
	   
	elseif message_id == hash("sound_done") then
	   isSoundPlaying = false
	  
	elseif message_id == hash("trigger_response") and sender.fragment == hash("triggerUp") then
        local pos = go.get_position(message.other_id)
        local playerPos = go.get_position()
        
        -- we want to control depth interaction. So, we block any extra enter or othr exit attempts with potentialKey
        -- which stores info about exact depth interaction
        local potentialKey = message.other_id--..message.other_group
        if message.enter and changedObjects[potentialKey] == nil then
            -- print(message.other_group)
            print("ENTER "..message.other_id)
            
            changedObjects[potentialKey] = pos.z
            pos.z = pos.z + zShift
        elseif not message.enter and changedObjects[potentialKey] ~= nil then
            print("EXIT ".. message.other_id)
            
            pos.z = changedObjects[potentialKey]
            changedObjects[potentialKey] = nil
        end
        
        go.set_position(pos, message.other_id)
	
    elseif message_id == hash("ReleaseInput") then
        -- reset sprint
        if self.animPlaybackRate == SPRINT_MOD then
            speed = speed / SPRINT_MOD
	        self.animPlaybackRate = 1
	    end
	    
	    -- release input focus
        msg.post(".", "release_input_focus")
	
	elseif message_id == hash("SetCheckpoint") then
		checkPoint = message.point
	
	elseif message_id == hash("collision_response") then
		if message.other_group == hash("movingWall") and checkPoint ~= nil then
			go.set_position(checkPoint)
		end
	elseif message_id == hash("RegisterDynamicText") then
		self.dynamicText = sender
	elseif message_id == hash("ShowDynamicText") then
		if self.dynamicText ~= nil then
			msg.post(self.dynamicText, "SetText", {text = message.text})
		end
	elseif message_id == hash("SetTimeControlEnabled") then
		 timeControlEnabled = message.timeControlEnabled
		 msg.post(HUD, "SetSpeedVisible", {visible = message.timeControlEnabled})
	end
end

function final(self) 
    msg.post(".", "release_input_focus") 
end



